<?xml version="1.0" encoding="ISO-8859-15"?>
<launch>
  <arg name="scene"                     default="scene0000_00" />
  <arg name="label_identifier"      default="pretrained24h_model" />
  <arg name="label_identifier_out"      default="not_specified_output_identifier" />
  <arg name="scannet_scene_dir"      default="/home/jonfrey/Datasets/scannet/scans/"/>
  <arg name="root_scannet"      default="/home/jonfrey/Datasets/scannet/"/>

  <arg name="scannet_scene_base"     default="/home/jonfrey/Datasets/scannet/scans"/>
  <arg name="label_scene_base"     default="labels_generated"/>

  <arg name="fps"                    default="10"/>
  <arg name="frame_limit"            default="-1"/>
  <arg name="sub_reprojected"      default="1"/>
  <arg name="mapping_scannet_path"   default="/home/jonfrey/Datasets/scannet/scannetv2-labels.combined.tsv"/>
  <arg name="scannet_labels"         default="False" />
  <arg name="output_dir"             default="/home/jonfrey/Datasets/output_kimera_semantics"/>
  <arg name="voxel_size"             default="0.02"/>
  <arg name="max_ray_length_m"       default="5"/>

  <!--  FRAMES  -->
  <arg name="sensor_frame"       default="base_link_gt"/>
  <arg name="base_link_gt_frame" default="base_link_gt"/>
  <arg name="base_link_frame"    default="base_link_gt"/>

  <!--  TOPICS  -->
  <arg name="depth_topic"       default="depth_img"/>
  <arg name="image_topic"       default="rgb_img"/>
  <arg name="seg_topic"         default="semantic_img"/>
  <arg name="sync_topic"        default="sync_semantic"/>
  <arg name="aux_labels"        default="invalid"/>
  <arg name="prob_aux"        default="0"/>
  <arg name="prob_main"        default="0"/>

  <arg name="semantic_label_2_color_csv_filename" default="nyu40_segmentation_mapping.csv"/>
  <arg name="use_dynamic_masking"         default="true"/>
  <arg name="semantic_pointcloud"         default="/semantic_pointcloud"/>

  <arg name="use_freespace_pointcloud"    default="false" />
  <arg name="freespace_pointcloud"        default="/dev/null"/>

  <node name="dl_mock" pkg="kimera_interfacer"
        type="dl_mock.py" output="screen" required="true" >
      <param name="base_link_gt_frame"        value="$(arg base_link_gt_frame)"/>
      <param name="base_link_frame"           value="$(arg base_link_frame)"/>
      <param name="world_frame"               value="world"/>
      <param name="depth_topic" value="$(arg depth_topic)"/>
      <param name="image_topic" value="$(arg image_topic)"/>
      <param name="seg_topic"   value="$(arg seg_topic)"/>
      <param name="sync_topic" value="$(arg sync_topic)"/>

      <param name="scannet_scene_dir"       value="$(arg scannet_scene_base)/$(arg scene)/"/>

      <param name="label_scene_dir"         value="$(arg scannet_scene_dir)/$(arg scene)/$(arg label_scene_base)/"/>
      <param name="mapping_scannet_path"    value="$(arg mapping_scannet_path)"/>
      <param name="scannet_labels"          value="$(arg scannet_labels)"/>
      <param name="fps"                     value="$(arg fps)"/>
      <param name="frame_limit"             value="$(arg frame_limit)"/>
      <param name="sub_reprojected"       value="$(arg sub_reprojected)"/>
      
      <param name="new_format"              value="true"/>
      
      
      <param name="probabilistic"           value="true"/>
      <param name="aux_labels"              value="$(arg aux_labels)" />
      
      <param name="prob_main"           value="$(arg prob_main)" />
      <param name="prob_aux"           value="$(arg prob_aux)" />
  </node>

  <node name="kimera_interfacer" pkg="kimera_interfacer"
      type="kimera_interfacer" output="screen" required="true" >

      Generate Semantic Pointcloud-->
      <remap from="pointcloud"                to="$(arg semantic_pointcloud)"/>

      Kimera Tsdf Node Parameters-->
      <param name="base_link_gt_frame"        value="$(arg base_link_gt_frame)"/>
      <param name="base_link_frame"           value="$(arg base_link_frame)"/>
      <param name="world_frame"               value="world"/>
      Input
      <remap from="pointcloud"                to="$(arg semantic_pointcloud)"/>

      <param name="depth_topic" value="$(arg depth_topic)"/>
      <param name="image_topic" value="$(arg image_topic)"/>
      <param name="seg_topic"   value="$(arg seg_topic)"/>
      <param name="sync_topic" value="$(arg sync_topic)"/>

      Params
      <param name="tsdf_voxel_size"           value="$(arg voxel_size)" />
      <param name="tsdf_voxels_per_side"      value="32" />
      <param name="max_ray_length_m"          value="$(arg max_ray_length_m)" />
      <param name="min_time_between_msgs_sec" value="0.2" />
      <param name="voxel_carving_enabled"     value="true" />
      <param name="color_mode"                value="lambert_color"/>
      <param name="use_const_weight"          value="false" />
      <param name="use_freespace_pointcloud"  value="$(arg use_freespace_pointcloud)" />
      <remap from="freespace_pointcloud"      to="$(arg freespace_pointcloud)"/>

      <param name="sensor_frame"              value="$(arg sensor_frame)"/>
      <param name="use_tf_transforms"         value="true" />

      <param name="enable_icp"                value="false" />
      <param name="icp_iterations"            value="10" />
      <param name="verbose"                   value="true" />
      Method to update voxels' information: "fast" or "merged"
      <param name="method"                           value="fast" />
      "color", "semantic" or "semantic_probability"
      <param name="semantic_color_mode"              value="semantic"/>
      <param name="semantic_measurement_probability" value="0.8" />
      The only dynamic label we have right now are humans, with label 20
      <rosparam param="dynamic_semantic_labels">[255]</rosparam>

      Is this needed?
      <param name="slice_level" value="1.0" />
      <param name="semantic_label_2_color_csv_filepath"
             value="$(find kimera_interfacer)/cfg/$(arg semantic_label_2_color_csv_filename)"/>

      <param name="mesh_filename"           value="$(arg output_dir)/$(arg scene)_$(arg label_identifier_out)_predict_mesh.ply" />
      <param name="tsdf_filename"           value="$(arg output_dir)/$(arg scene)_$(arg label_identifier_out)_predict_tsdf_esdf_layers.vxblx" />
      <param name="semantic_filename"       value="$(arg output_dir)/$(arg scene)_$(arg label_identifier_out)_serialized.data" />
  </node>
</launch>
